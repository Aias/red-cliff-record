---
description: 
globs: 
alwaysApply: true
---
# Project Structure

Red Cliff Record is a personal knowledge repository that aggregates data from multiple external sources (GitHub, Airtable, Raindrop, Readwise, Twitter, Adobe, Feedbin, Chromium-based Browser History) into a searchable, relational database. It's built with React 19, TanStack Router, tRPC, Drizzle ORM, and PostgreSQL, deployed on Cloudflare Pages.

**IMPORTANT**: This project uses both `CLAUDE.md` and `.cursor/rules/` files for development guidelines. When making significant refactoring or architectural changes, both files must be updated to stay in sync.

**IMPORTANT**: Never run any sync scripts without checking with the user first.

## Frontend (`src/app/`)
- `routes/`: Contains all Tanstack React Router routes
- `components/`: Reusable frontend components (aliased as `@/components`)
- `lib/`: Client-side utility functions and helpers (aliased as `@/lib`)
  - `hooks/`: React hooks split into focused modules (record-queries, record-mutations, media-mutations, link-mutations)

## Backend (`src/server/`)
- `api/`: tRPC API routes and routers
- `db/`: Drizzle database schema and migrations (aliased as `@/db`)
- `lib/`: Server-only utilities (aliased as `@/server/lib`)
  - `media.ts`: Complete media handling (R2 uploads, metadata extraction, MIME detection)
  - `image-metadata.ts`: Pure image format parsing utility
  - `url-utils.ts`: Server-side URL validation and formatting
  - `constants.ts`: Server-specific constants (SIMILARITY_THRESHOLD, similarity function)
- `integrations/`: External API integrations and sync scripts

## Shared (`src/shared/`)
- `lib/`: Universal utilities (aliased as `@/shared/lib`) - work in both client and server environments
  - `formatting.ts`: Text formatting and Zod transformers (toTitleCase, emptyStringToNull)
  - `embedding.ts`: Text processing for embeddings (getRecordTitle, createRecordEmbeddingText)
  - `merge-records.ts`: Record merging logic (mergeRecords, mergeTextFields)

## Three-Tier Utility Organization
1. **Shared utilities** (`src/shared/lib/`): Universal code that works in both client and server environments
2. **Client utilities** (`src/app/lib/`): Browser-only code (React hooks, client APIs)
3. **Server utilities** (`src/server/lib/`): Server-only code (Node.js, databases, file systems)

## Import Rules
- ✅ Shared code can be imported by both client and server
- ✅ Server code can import from shared and other server modules
- ✅ Client code can import from shared and other client modules
- ❌ NEVER import server code from client code
- ❌ NEVER import client code from server code

## Import Aliases
- `@/` - src directory
- `@/shared/` - universal utilities that work in both client and server environments
- `@/server/` - server code (includes `@/server/lib/` for server utilities)
- `@/components` - frontend components  
- `@/lib` - client-side utility functions
- `@/db` - database schema

## Configuration Files
- `app.config.ts`: Tanstack/Vite application configuration
- `components.json`: Shadcn UI configuration
- `drizzle.config.ts`: Database configuration
- `tsconfig.json`: TypeScript configuration
- `eslint.config.js`: ESLint configuration
- `.prettierrc` and `.prettierignore`: Prettier configuration

## Essential Commands

**Development:**
- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm lint` - Format, lint, and type check

**Database:**
- `pnpm db:migrate` - Run database migrations
- `pnpm db:studio` - Open Drizzle Studio for database inspection

**Data Sync:**
- `pnpm sync:daily` - Run all integrations
- Individual sync: `pnpm sync:github`, `pnpm sync:airtable`, `pnpm sync:raindrop`, `pnpm sync:readwise`, `pnpm sync:twitter`, `pnpm sync:feedbin`, `pnpm sync:browsing`

## Critical Development Rules

**Type Safety:**
- End-to-end TypeScript with _no type assertions_. This is a hard rule. Never use `any`, never use `as` for type casting, never disable type checking, and never use `@ts-ignore` or `@ts-expect-error`.
- Use Zod v4 for runtime validation
- Use database types from Drizzle schema

**Performance:**
- Implement proper memoization where needed
- Implement proper error boundaries
- Consider code splitting for larger components
- Use efficient query patterns and proper indexing

**Before Every Commit:**
- Run `pnpm lint`
- Update CLAUDE.md if refactoring changes architectural patterns or introduces new conventions

## Development Guidelines
- All components should be fully typed with TypeScript
- Use Tailwind for styling and Shadcn UI for complex components
- Follow semantic HTML practices
- Implement form handling with TanStack Forms
- Use Lucide icons with proper component imports
- Handle database operations via tRPC and Drizzle
- Maintain performance optimization as a priority
