---
description: 
globs: 
alwaysApply: true
---
# Database and API Development Guidelines

## Database Operations
- Use Drizzle ORM for all database operations
- Prefer relational queries: `db.query.<table>` over `db.select().from(<table>)`
- Avoid raw SQL - use Drizzle's query builder APIs instead of `sql` template literals
- Use proper methods for mutations:
  - `db.insert()` for creating records
  - `db.update()` for updating records
  - `db.delete()` for deleting records
- Always handle conflicts gracefully on insertions with `.onConflictDoUpdate()`
- When defining primary keys for integration tables, use `integer('id').primaryKey()` instead of `serial('id').primaryKey()` when the ID comes from an external source
- Keep database schema in `src/server/db/`

## API Development
- Create tRPC routers in `src/server/api/routers/`
- Use Zod for input validation (Note: we use Zod v4 - when working with Zod make sure to look up the most recent docs)
- Implement proper error handling
- Follow RESTful principles for endpoint design
- Use proper HTTP status codes

## Data Fetching
- Use tRPC client and hooks from `src/app/trpc.ts`
- Implement proper loading states
- Handle errors appropriately
- Use proper caching strategies
- Invalidate queries after mutations

## Type Safety
- Use database types from Drizzle schema
- Implement proper input/output types for all procedures
- Use Zod v4 schemas for runtime validation
- End-to-end TypeScript with _no type assertions_. This is a hard rule. Never use `any`, never use `as` for type casting, never disable type checking, and never use `@ts-ignore` or `@ts-expect-error`.

## Performance
- Implement proper indexing
- Use efficient query patterns
- Implement proper caching strategies
- Consider pagination for large datasets
- Optimize database queries
