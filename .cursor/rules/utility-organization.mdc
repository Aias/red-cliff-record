---
description: Rules for organizing utility functions and media handling
globs: ["src/app/lib/**", "src/server/lib/**", "src/shared/lib/**"]
alwaysApply: true
---
# Utility Organization Guidelines

## Three-Tier Utility Organization

### Shared Utilities (`src/shared/lib/`)
- **Purpose**: Universal utilities that work in both client and server environments
- **Examples**: Text processing, data transformations, pure functions
- **Current modules**:
  - `formatting.ts`: Text formatting and Zod transformers (`toTitleCase`, `emptyStringToNull`)
  - `embedding.ts`: Text processing for embeddings (`getRecordTitle`, `createRecordEmbeddingText`)
  - `merge-records.ts`: Record merging logic (`mergeRecords`, `mergeTextFields`)

### Client Utilities (`src/app/lib/`)
- **Purpose**: Browser-only utilities and React-specific helpers
- **Examples**: React hooks, browser APIs, client-side validation
- **Current modules**:
  - `utils.ts`: Tailwind className merging (`cn`)
  - `hooks/`: React hooks organized by domain
  - `read-file.ts`: Browser FileReader API utilities

### Server Utilities (`src/server/lib/`)
- **Purpose**: Server-only utilities (Node.js, R2, database operations)
- **Examples**: Media processing, URL validation, file uploads
- **Current modules**:
  - `media.ts`: Complete media pipeline (R2 uploads, metadata extraction)
  - `image-metadata.ts`: Pure image format parsing (PNG, JPEG, WebP, etc.)
  - `url-utils.ts`: Server-side URL validation and formatting
  - `constants.ts`: Server-specific constants (SIMILARITY_THRESHOLD, similarity function)

## Media & File Handling Rules

### When to use `@/server/lib/media`
- R2 file uploads (`uploadMediaToR2`, `uploadClientFileToR2`)
- Media metadata extraction (`getSmartMetadata`, `getMediaInsertData`)
- MIME type detection (`getMimeTypeFromURL`, `getMediaTypeFromURL`)
- File deletion (`deleteMediaFromR2`)

### When to use `@/server/lib/image-metadata`
- Pure image format parsing from binary data
- Extracting dimensions, format, and size from image buffers
- Browser-independent image processing

### When to use `@/server/lib/url-utils`
- Server-side URL validation (`validateAndFormatUrl`)
- URL mapping and transformation (`mapUrl`)
- Protocol normalization (adding https://)

## React Hooks Organization

### Focused Hook Modules
- `record-queries.ts`: Read operations (useRecord, useRecordList, useRecordTree)
- `record-mutations.ts`: CRUD operations (useUpsertRecord, useDeleteRecords, useMergeRecords)
- `media-mutations.ts`: Media operations (useCreateMedia, useDeleteMedia)
- `link-mutations.ts`: Link operations (useUpsertLink, useDeleteLinks)

### Main Hook File
- `use-records.ts`: Re-exports all hooks for backward compatibility
- Use specific imports when adding new functionality
- Example: `import { useRecord } from '@/lib/hooks/record-queries'`

## Critical Rules

1. **✅ Shared code can be imported by both client and server**
2. **✅ Server code can import from shared and other server modules**
3. **✅ Client code can import from shared and other client modules**
4. **❌ NEVER import server code from client code**
5. **❌ NEVER import client code from server code**
6. **Always use appropriate import aliases** (`@/shared/lib/`, `@/server/lib/`, `@/lib/`)
7. **Split large utility files into focused modules**
8. **NEVER create backward compatibility files during refactoring - update all imports directly**
9. **When moving or splitting files, update ALL imports immediately**
10. **Always prefer direct imports from the correct location over convenience re-exports**
11. **During large refactors, complete the entire migration in one go rather than leaving transitional files**

## File Editing Guidelines

- This project uses **tabs for indentation** (not spaces)
- When doing exact string replacements with MultiEdit, always verify whitespace by reading the exact lines first
- Use `sed -n 'start,end p' filename` to see exact content with proper formatting
- For complex multi-line replacements, prefer smaller, targeted changes over large blocks
- When uncertain about whitespace, use the Bash tool with `grep -A/-B` to see context