/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RecordsRouteRouteImport } from './routes/records/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as IntegrationsIndexRouteImport } from './routes/integrations/index'
import { Route as RecordsRecordIdRouteImport } from './routes/records/$recordId'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'
import { Route as BlogRouteImport } from './routes/blog'

const rootServerRouteImport = createServerRootRoute()

const RecordsRouteRoute = RecordsRouteRouteImport.update({
  id: '/records',
  path: '/records',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsIndexRoute = IntegrationsIndexRouteImport.update({
  id: '/integrations/',
  path: '/integrations/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordsRecordIdRoute = RecordsRecordIdRouteImport.update({
  id: '/$recordId',
  path: '/$recordId',
  getParentRoute: () => RecordsRouteRoute,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations': typeof IntegrationsIndexRoute
  '/blog': typeof BlogRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations': typeof IntegrationsIndexRoute
  '/blog': typeof BlogRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations/': typeof IntegrationsIndexRoute
  '/blog': typeof BlogRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/records' | '/records/$recordId' | '/integrations' | '/blog'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/records' | '/records/$recordId' | '/integrations' | '/blog'
  id: '__root__' | '/' | '/records' | '/records/$recordId' | '/integrations/' | '/blog'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecordsRouteRoute: typeof RecordsRouteRouteWithChildren
  IntegrationsIndexRoute: typeof IntegrationsIndexRoute
  BlogRoute: typeof BlogRoute
}
export interface FileServerRoutesByFullPath {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc/$'
  id: '__root__' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/records': {
      id: '/records'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations/': {
      id: '/integrations/'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof IntegrationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/records/$recordId': {
      id: '/records/$recordId'
      path: '/$recordId'
      fullPath: '/records/$recordId'
      preLoaderRoute: typeof RecordsRecordIdRouteImport
      parentRoute: typeof RecordsRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface RecordsRouteRouteChildren {
  RecordsRecordIdRoute: typeof RecordsRecordIdRoute
}

const RecordsRouteRouteChildren: RecordsRouteRouteChildren = {
  RecordsRecordIdRoute: RecordsRecordIdRoute,
}

const RecordsRouteRouteWithChildren = RecordsRouteRoute._addFileChildren(
  RecordsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecordsRouteRoute: RecordsRouteRouteWithChildren,
  IntegrationsIndexRoute: IntegrationsIndexRoute,
  BlogRoute: BlogRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
