/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RecordsRouteRouteImport } from './routes/records/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as IntegrationsIndexRouteImport } from './routes/integrations/index'
import { Route as RecordsRecordIdRouteImport } from './routes/records/$recordId'
import { Route as ApiTrpcSplatRouteImport } from './routes/api/trpc/$'

const RecordsRouteRoute = RecordsRouteRouteImport.update({
  id: '/records',
  path: '/records',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsIndexRoute = IntegrationsIndexRouteImport.update({
  id: '/integrations/',
  path: '/integrations/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordsRecordIdRoute = RecordsRecordIdRouteImport.update({
  id: '/$recordId',
  path: '/$recordId',
  getParentRoute: () => RecordsRouteRoute,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations': typeof IntegrationsIndexRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations': typeof IntegrationsIndexRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/records': typeof RecordsRouteRouteWithChildren
  '/records/$recordId': typeof RecordsRecordIdRoute
  '/integrations/': typeof IntegrationsIndexRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/records'
    | '/records/$recordId'
    | '/integrations'
    | '/api/trpc/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/records' | '/records/$recordId' | '/integrations' | '/api/trpc/$'
  id:
    | '__root__'
    | '/'
    | '/records'
    | '/records/$recordId'
    | '/integrations/'
    | '/api/trpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecordsRouteRoute: typeof RecordsRouteRouteWithChildren
  IntegrationsIndexRoute: typeof IntegrationsIndexRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/records': {
      id: '/records'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations/': {
      id: '/integrations/'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof IntegrationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/records/$recordId': {
      id: '/records/$recordId'
      path: '/$recordId'
      fullPath: '/records/$recordId'
      preLoaderRoute: typeof RecordsRecordIdRouteImport
      parentRoute: typeof RecordsRouteRoute
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface RecordsRouteRouteChildren {
  RecordsRecordIdRoute: typeof RecordsRecordIdRoute
}

const RecordsRouteRouteChildren: RecordsRouteRouteChildren = {
  RecordsRecordIdRoute: RecordsRecordIdRoute,
}

const RecordsRouteRouteWithChildren = RecordsRouteRoute._addFileChildren(
  RecordsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecordsRouteRoute: RecordsRouteRouteWithChildren,
  IntegrationsIndexRoute: IntegrationsIndexRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
